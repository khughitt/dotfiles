################################################################################
#
# Functions
#
################################################################################

# alias lookup
function al {
    alias | grep $1
}

# relative working directory
function wd {
    echo ${$(pwd)/$HOME\//}
}

# quick history searches
function h {
    history -df -100000 | grep $1
}

# process management
function pg {
    ps -Af | grep $1 | grep -v grep
}

# head helper functions
function hl {
    head -n10 $1 | less
}
function hv {
    head -n10 $1 | vd -
}

#
# fzf notes
# 

# edit note
function notes {
    wd=`pwd`

    cd ~/notes

    # determine fd command to use
    fd_cmd="fd -t f md"

    # if "-p" switch is present, exclude personal entries from search results
    if [[ $1 == "-p" ]]; then
        fd_cmd="$fd_cmd $MINDFUL_EXCLUDES"
        shift;
    fi

    target=`eval $fd_cmd | grep --color='none' "$1" | fzf -1 --exact --preview 'mdcat {}' --preview-window up`

    if [ ! -z "$target" ]; then
        echo "Opening ~/notes/$target"
        $EDITOR $target
    fi

    cd $wd
}

# add note
function a {
    pwd=`pwd`

    cd ~/notes

    # get directory to store note in
    target=`fd -t d | grep --color='none' "$1" | fzf -1 --exact`

    # prompt user for filename
    if [ ! -z "$target" ]; then
        vared -p "Filename? (${target}/XX): " -c fname
        vim $target/$fname
    fi

    cd $pwd
}

# journal manager
# 
# scans a folder containing project-specific markdown journal entries used to 
# track daily work on different fronts.
#
function jm {
    wd=`pwd`

    cd ~/d/journal
    target=`fd -t f md -X ls -t | grep --color='none' "$1" | fzf -1 --exact`

    if [ ! -z "$target" ]; then
        vim $target
    fi

    cd $wd
}

# fzf confs
function c {
    target=`fd --regex 'conf|init|rc|aliases|exports|functions|private|Renviron|Rprofile|rofi-tasks|scratch.vim|zshenv' \
            --exclude Extracted ~/.dotfiles |\
            grep --color='none' "$1" |\
            fzf -1 --exact`

    if [ ! -z "$target" ]; then
        vim $target
    fi
}

# vim + ag
function va {
    nvim $(ag -l $1)
}

# zcat | wc -l
function zcl {
    zcat $1 | wc -l
}

# feh browse dir
function fehd {
    feh â€“start-at $1
}

# syntax highlighting in less 
function les {
    src-hilite-lesspipe.sh "$1" | less -R
}

#
# ffmpeg - h.265 video conversion
# 
# <input> <start> <duration>
# 
function ffh265 {
    local infile=$1
    local ext="${infile##*.}"
    local outfile=${infile/$ext/mp4}

    # convert entire video
    if [ $# -eq 1 ]; then
        cmd="ffmpeg -i $infile -c:v libx265 -crf 28 -preset medium -c:a aac -b:a 192k $outfile"
        echo $cmd
    else
        local start=$2
        local duration=$3

        # otherwise, if start and duration specified, convert a specific region;
        # note that when the "-ss" option is used, timestamp gets reset, and so 
        # a duration (-t) must be used in place of the "-to" switch
        cmd="ffmpeg -ss \"$start\" -i $infile -t \"$duration\" -c:v libx265 -crf 28 -preset medium -c:a aac -b:a 192k $outfile"
        echo $cmd
    fi
}

#
# ffmpeg - crop video
# 
# <input> <start> <stop> "<title>" <output>
#
function ffcut {
    cmd="ffmpeg -i $1 -ss $2 -to $3 -codec copy -metadata title=\"$4\" $5"
    echo "Running: $cmd"
    eval $cmd
}

#
# checks for some specified gene identifier in several different reference annotations
# and mapping
#
function check_gene {
    query=$1

    # Strip "LOC" prefix, if present;
    # "LOC" genes are listed in NCBI genes without the "LOC" prefix
    # https://www.ncbi.nlm.nih.gov/books/NBK3840/
    if [ "$1" != "${query#LOC}" ]; then
        echo "Removing LOC prefix..."
        query=${query#LOC} 
    fi

    echo "Checking Ensembl GRCh37 GTF..."
    zgrep $query /data/ref/human/ensembl/GRCh37/100/Homo_sapiens.GRCh37.87.gtf.gz

    echo "Checking Ensembl GRCh38 GTF..."
    zgrep $query /data/ref/human/ensembl/GRCh38/100/Homo_sapiens.GRCh38.100.gtf.gz

    echo "Checking HUGO gene symbol mapping..."
    grep $query /data/ref/human/hugo/genenames_2020-08-08.tsv

    echo "Checking NCBI Genes..." 
    zgrep $query /data/ref/human/ncbi/Homo_sapiens.gene_info.gz
}
 
#
# dataset functions
#

# number of columns
function nc {
    if [[ $1 == *.tsv* ]]; then
        csvgrep -n -t $1 | wc -l
    else
        csvgrep -n $1 | wc -l
    fi
}

# helper function to quickly load a dataset into ipython
function dat {
    # get current data package dir
    version=`ls /data/packages | tail -n1`
    pkgdir="/data/packages/$version"

    # search clean data and most recent data packages
    fd_cmd="fd . -e .tsv -e .feather -e .parquet -e .csv -e .gz $pkgdir /data/clean"
    target=`eval $fd_cmd | fzf -1 --exact`

    # get extension, excluding .gz 
    filename=${target/.gz/}
    ext="${filename##*.}"

    # launch ipython and attempt to load the dataset
    if [ ! -z "$target" ]; then
        echo "Loading dataset $target..."

        if [ $ext = "feather" ]; then
            ipython -i -c "import pandas as pd; dat=pd.read_feather('$target');"
        elif [ $ext = "parquet" ]; then
            ipython -i -c "import pandas as pd; dat=pd.read_parquet('$target');"
        elif [ $ext = "csv" ]; then
            ipython -i -c "import pandas as pd; dat=pd.read_csv('$target');"
        elif [ $ext = "tsv" ]; then
            ipython -i -c "import pandas as pd; dat=pd.read_csv('$target', sep='\t');"
        else
            echo "Unrecognized filetype specified: $ext"
        fi
    fi
}

