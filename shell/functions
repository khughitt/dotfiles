################################################################################
#
# Functions
#
################################################################################

# alias lookup
function al {
    alias | grep $1
}

# function lookup
function fu {
  lines=`ag --no-number "^function" ~/.shell/functions`

  echo $lines | while read line; do 
    # parse function name
    func=$(echo $line | sed 's/function //' | cut -d ' ' -f1);

    # get function definition
    def=`type -af $func`
  
    if echo $def | grep -q $1; then
      echo $def
    fi
  done
}

# recursively count files in subdirs
function count_files {
  now=`date +%Y-%m-%d`
  outfile="file_counts_$now.txt"

  touch $outfile

  # non-hidden folders
  for x in */; do
    echo $x >> $outfile; 
    fd -Luu . $x -t f | wc -l >> $outfile;
  done

  # if hidden directories present, include them..
  num_hidden=`/bin/ls -Ap | grep "^\..*/$" | wc -l`

  if [ "$num_hidden" -ne "0" ]; then
    for x in .*/; do
      echo $x >> $outfile; 
      fd -Luu . $x -t f | wc -l >> $outfile;
    done
  fi
}

# copy full path
function cfp {
  realpath -s $1 | xsel
}

# relative working directory
function wd {
    echo ${$(pwd)/$HOME\//}
}

# quick history searches
function h {
    history -df -100000 | grep $1
}

# mkdir & cd into it
function mdd {
  mkdir -p $1
  cd $1
}

# process management
function pg {
    ps -Af | grep $1 | grep -v grep
}

# docker tty
function dty {
    docker exec -it $1 /bin/bash
}

# pandoc + mermaid
function merp {
  pandoc -t html --mathjax -F mermaid-filter -o ${1/.md/.html} $1 
}

# glslviewer
# note: may want to remove --headless option when working more on animated shaders..
function gls2png {
    outfile="output/${1/.frag/.png}"
    
    glslviewer $1 \
        -w 1080 \
        -h 1080 \
        -s 1 \
        --headless \
        -o $outfile

    icat $outfile 
}

# mamba env launcher
function ma {
  wd=`pwd`

  cd $MAMBA_ROOT_PREFIX/envs/
  target=`/bin/ls -t | grep --color='none' "$1" | fzf -1 --exact`

  if [ ! -z "$target" ]; then
    micromamba activate $target
  fi

  cd $wd
}

# copy kitty terminfo to conda envs
function mamba_kitty {
  for x in $MAMBA_ROOT_PREFIX/envs/*/share/terminfo/x; do 
    echo $x; 
    cp /usr/share/terminfo/x/xterm-kitty $x;
  done
}

# quick hop to a specific data dir (limit to project data to speed things up..)
function data_dir {
    cd /data/proj

    # determine fd command to use
    fd_cmd="fd -t d"

    target=`eval $fd_cmd | grep --color='none' "$1" | fzf -1 --exact`

    if [ ! -z "$target" ]; then
        cd "/data/proj/$target"
    fi
}

# fzf confs
function C {
    target=`fd . "$DOTFILES" -t f \
            --no-ignore-vcs \
            --exclude "tpm" --exclude "tmp" --exclude "tmux-*" --exclude "Extracted" \
            --exclude "*.xml" --exclude "*.png" --exclude "*.desktop" \
            --exclude "plugged" --exclude "black"`

    target=`echo $target |\
            grep --color='none' "$1" |\
            fzf -1 --exact`

    if [ ! -z "$target" ]; then
        vim $target
    fi
}

# cheatsheets
function c {
    target=`/bin/ls $DOTFILES/cheatsheets/ |\
            grep --color='none' "$1" |\
            fzf -1 --exact --preview 'bat $DOTFILES/cheatsheets/{}' --preview-window up`

    if [ ! -z "$target" ]; then
        vim $DOTFILES/cheatsheets/$target
    fi
}

# vim + rg
function va {
    $EDITOR $(rg -l $1)
}

# vim + fzf
function vI {
    target=`fd -t f \
            --exclude "*.svg" --exclude "*.png"`

    target=`echo $target |\
            grep --color='none' "$1" |\
            fzf -1 --exact`

    if [ ! -z "$target" ]; then
        vim $target
    fi
}

# zcat | wc -l
function zcl {
    zcat $1 | wc -l
}

# translate (中文 -> 英語)
function tt {
    sdcv -c $1
    echo "------------------------\n"
    trans zh-TW:en $1
}

# checks for some specified gene identifier in several different reference annotations
# and mapping
function check_gene {
    query=$1

    # Strip "LOC" prefix, if present;
    # "LOC" genes are listed in NCBI genes without the "LOC" prefix
    # https://www.ncbi.nlm.nih.gov/books/NBK3840/
    if [ "$query" != "${query#LOC}" ]; then
        echo "Removing LOC prefix..."
        query=${query#LOC} 
    fi

    echo "Checking Ensembl GRCh37 GTF..."
    zgrep $query /data/ref/human/ensembl/GRCh37/100/Homo_sapiens.GRCh37.87.gtf.gz

    echo "Checking Ensembl GRCh38 GTF..."
    zgrep $query /data/ref/human/ensembl/GRCh38/100/Homo_sapiens.GRCh38.100.gtf.gz

    echo "Checking HUGO gene symbol mapping..."
    grep $query /data/ref/human/hugo/genenames_2020-08-08.tsv

    echo "Checking NCBI Genes..." 
    zgrep $query /data/ref/human/ncbi/Homo_sapiens.gene_info.gz
}
 
#
# dataset functions
#

# number of columns
function ncol {
    if [[ $1 == *.tsv* ]]; then
        csvgrep -n -t $1 | wc -l
    elif [[ $1 == *.csv* ]]; then
        csvgrep -n $1 | wc -l
    elif [[ $1 == *.feather ]]; then
        python -c \
          "import sys; import pandas as pd; print(pd.read_feather(sys.argv[1]).shape[1])" $1
    else
        echo "Unsupported format..."
    fi
}

# opens a specified dataset in ipython
function o {
    # get extension, excluding .gz 
    filename=${1/.gz/}
    ext="${filename##*.}"

    if [ $ext = "feather" ]; then
        ipython -i -c "import pandas as pd; dat=pd.read_feather('$1'); dat;"
    elif [ $ext = "parquet" ]; then
        ipython -i -c "import pandas as pd; dat=pd.read_parquet('$1'); dat;"
    elif [ $ext = "csv" ]; then
        ipython -i -c "import pandas as pd; dat=pd.read_csv('$1'); dat;"
    elif [ $ext = "tsv" ] || [ $ext = "txt" ]; then
        ipython -i -c "import pandas as pd; dat=pd.read_csv('$1', sep='\t'); dat;"
    else
        echo "Unrecognized filetype specified: $ext"
    fi
}

# helper function to quickly find and load a dataset from a set of known
# locations into ipython
function dat {
    # data directories to search
    searchpaths="/data/packages /data/proj /data/clean"

    # search clean data and most recent data packages
    fd_cmd="fd . -e .tsv -e .feather -e .parquet -e .csv -e .gz $searchpaths"
    target=`eval $fd_cmd | fzf -1 --exact`

    # launch ipython and attempt to load the dataset
    if [ ! -z "$target" ]; then
        echo "Loading dataset $target..."
        o $target
    fi
}

# similar to dat, but limited to datapackages and including preview pane
function datp {
    # get current data package dir
    # version=`/bin/ls /data/packages | tail -n1`
    # searchpaths="/data/packages/$version"
    searchpaths="/data/packages"

    # search clean data and most recent data packages
    fd_cmd="fd datapackage $searchpaths --exclude archive"
    target=`eval $fd_cmd | fzf -1 --exact --preview 'nodes info {}'`

    # launch ipython and attempt to load the dataset
    if [ ! -z "$target" ]; then
        echo "Loading $target..."

        ipython -i -c "from nodes.nodes import DataFrameNode; pkg=DataFrameNode.from_pkg('$target');"
    fi
}

# create new vite + react proj
function vite_proj {
  export projname="$1"
  npm create vite@latest "$projname"  -- --template react-ts

  cd "$projname"
  npm i

  # eslint
  sed -i "s/bundler/Node/" tsconfig.json

  npm install eslint eslint-plugin-react --save-dev
  sed -i "/eslint:recommended/a \ \ \ \ 'plugin:react/recommended'," .eslintrc.cjs

  # r3f & friends
  npm install three @types/three @react-three/fiber \
    @react-three/drei @react-three/postprocessing leva

  # .glsl support
  npm i vite-plugin-glsl --save-dev
  sed -i "1 i import glsl from 'vite-plugin-glsl';" vite.config.ts
  sed -i "s/react()/react(), glsl()/" vite.config.ts
  sed -i '/compilerOptions/a \ \ \ \ "types": ["vite-plugin-glsl/ext"],' tsconfig.json

  echo "Finished!.."
  echo "---"
  echo "Manual step:"
  echo "sudo attr -s com.dropbox.ignored -V 1 node_modules"
}

# set background
function wali {
  if [ "$#" -eq 0 ]; then
    target="$HOME/d/linux/backgrounds/3440"
  else
    target="$1"

    if [ ! -e "$target" ]; then
      echo "Invalid path specified!"
      return 1
    fi
  fi

  wal -i $target --backend haishoku
}

# remove background
function walirm {
  img=$(basename `cat ${HOME}/.cache/wal/wal`)
  fd $img -x rm
  wali
}

# keep track of favs
alias walifav='cat ~/.fehbg | grep -Eo "[\/a-z0-9]+PXL.*.png" >> $HOME/d/linux/backgrounds/favorites.txt'

# create png palette based on wal colors
function walpal {
  source ~/.cache/wal/colors.sh

  magick -size 64x64 xc:"$color1" xc:"$color2" xc:"$color3" xc:"$color4" xc:"$color5" xc:"$color6" +append /tmp/a.png
  magick -size 64x64 xc:"$color1" xc:"$color2" xc:"$color3" xc:"$color4" xc:"$color5" xc:"$color6" +append /tmp/b.png
  magick -append /tmp/a.png /tmp/b.png ~/.cache/wal/palette.png
}

# fahrenheit to celsius
function ftoc {
  cel=$(echo "scale=4;(5/9)*($1-32)" | bc)  # scale determines precision
  echo "${cel%???}"                         # strip last few digits
}

# celsius to fahrenheit
function ctof {
  far=$(echo "scale=4;(9/5)*$1 + 32" | bc)
  echo "${far%???}"
}

# jq | less
function jql {
  cat $1 | jq -C | /bin/less -R
}

# virtual env launcher
function venv {
  wd=`pwd`

  cd ~/venv/
  target=`/bin/ls -t | grep --color='none' "$1" | fzf -1 --exact`

  if [ ! -z "$target" ]; then
    source ~/venv/$target/bin/activate
  fi

  cd $wd
}
alias ven=venv

# preview generated colormage palettes
function color_preview {
  for img in ~/d/colors/_inc/*-preview.jpg; do
    echo $img; 
    kitty +kitten icat $img;
    
    base=${img/-preview.jpg/}

    for x in ${base}*.(png|jpg); do
      kitty +kitten icat $x;
    done
  done
}

# vi:syntax=bash
