# rustup
rustup install stable
rustup default stable
rustup update

# type conversion
let f = i as f32;   # int -> float
let x: u32 = x.trim().parse().expect("not a number");  # str -> int

# shadowing 
# - overrides previous value, within scope
# - uses "let" each time
# - type can differ
let x = 3;
..
let x = x + 1;

# mut
# - value can be changed without need to use "let"
# - type cannot change
let mut x = 3;
x = x + 1;

# tuples
let tup = (1, 2.0, 'a');  # create
tup.0                     # indexing
let (a, b, c) = tup;      # destructure

# arrays
let arr = ['a', 'b', 'c'];
let arr: [u32; 3] = [1, 2, 3];
let ones = [1; n];
arr[0]
for elem in a { ... }

# strings
"foo"                # string literal (immutable, fixed length)
s = String::from("foo")  # String type (mutable, variable length)

s.push_str("..")  # append

s.split('_')
s.split_whitespace()
s.lines()

# vectors
# https://doc.rust-lang.org/std/vec/
let v: Vec<i32> = vec![];
let v = vec![1, 2, 3, 4, 5];
let v = vec![0; 10]; // ten zeroes

v[2..]
v[..5]
v[0..4]
v[0..=4]   # inclusive end
v[..]

v.len();

for x in v.iter() {...}
for (i, x) in v.iter().enumerate() {...}

v.push(5);
let val = v.pop();

v[3];
v[2] = v[2] + 1;

# number ranges
(1..5)
(1..5).rev()

# ternary assignment
let x = if .. { a } else { b };

# read file contents
use std::fs;

let contents = fs::read_to_string("in.txt")
    .expect("Unable to find file!");

# examples of iterating over lines in a file:
# - https://stackoverflow.com/a/45882510/554531
# - https://doc.rust-lang.org/rust-by-example/std_misc/file/read_lines.html#read_lines

# iterate over lines in file
if let Ok(lines) = read_lines("in.txt") {
    for line in lines {
        if let Ok(txt) = line {
            println!("{}", txt);
        }
    }
}

# closures (~lambdas)
|val| val + x
