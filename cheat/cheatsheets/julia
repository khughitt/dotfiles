# str -> int
parse(Int64, "5000")

# arrays (vectors are 1d arrays; matrices are 2d arrays)
a = Int32[3, 5, 9]
a[1]
a[2:end]
size(a)
length(a)

# broadcasting
a = [1, 0, 2, 3]
a .> 1
sum(a .!= 0)

# boolean masking
a[a .> 0]

# \in
"foo" in a
"foo" ∈ a

# \notin
!("foo" in a)
"foo" ∉ a

# set diff
setdiff(a, b)

# looping
for i [1:1:10;]
  print(i)
end

# lambda funcs
x -> x^2 + 1

# join filepaths
joinpath("dir", "subdir")

# check type
typeof(x)

# distributions
randn(N)

# tuples
(1, 2, 3)
(a=1, b=2, c=3)

# map
map(ceil, [0.1, 0.2])
map(x -> func(x, ...), vec)

# string concatenation
"foo" * "bar"

# regex replace
replace(s, r"regex" => "bar")

#
# matrices
#

# create a random matrix
X = reshape(randn(3 * 4), (3, 4))

# dim / shape
size(X)

# convert 1 x n matrix to vector
vec(X)

#
# packages
#

# Add BioJulia
registry add https://github.com/BioJulia/BioJuliaRegistry.git

# update packages
update

#
# environments
#
pkg> 
  activate .   # activate env in current dir
  st           # status
pkg>
  activate .
  instantiate  # instantiate someone else's project

#
# Tables.jl
#

# load feather/arrow file
using Arrow;
dat = Arrow.Table('data.feather')

# convert to dataframe
using DataFrames
DataFrame(dat)

# row-wise access
rows = Tables.rows(x)

# column-wise access
columns = Tables.columns(x)

Tables.columnnames(x)
Tables.getcolumn(columns, col)


