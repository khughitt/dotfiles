# numbers
Inf

# if statements
if x < 5
  ..
elseif x < 10
  ..
else
  ...
end

# formatted print
using Printf
@printf("total: %d", 5)

# arrays (vectors are 1d arrays; matrices are 2d arrays)
a = [1, 2, 3]         # Int64
a = Int32[3, 5, 9]
a[1]
a[2:end]
size(a)   # dim
length(a) # len
reverse(a)

push!(a, 3)
pop!(a)

zeros((2, 3))         # Float64
zeros(Int8, (2, 3))

# ";" and "\n" -> vertical concatenation
[1:2; 4:5]  # 4-elem vector

# tab, space, and ";;" -> horizontal concatentation
[1:2 4:5]          # 2x2 Matrix
[[1,2,3] [4,5,6]]  # 3x2 Matrix

a = Int[]                       # create an empty Int array
a = Tuple{UInt8,UInt8,UInt8}[]  # create an empty array of tuples

# broadcasting
a = [1, 0, 2, 3]
a .> 1   # apply gt to all elements
a .- 1   # substract 1 from all elements
sum(a .!= 0)

# boolean masking
a[a .> 0]

# \in
"foo" in a
"foo" ∈ a

# \notin
!("foo" in a)
"foo" ∉ a

# chunk / partition
Iterators.partition(lines, 3) |> collect

# ranges
collect(1:10)   # Array{Int64}
[1:2:10;]       # 1 -> 10 (by: 2)

# sets
Set([1, 2, 3])
Set(['a', 'b', 'c'])

first(s)

in("foo", s)

intersect(s1, s2)
intersect([1, 2, 3],  [2, 3, 4])

setdiff(a, b)

# set to array
[x for x in s]
[s...]  # or..

# dicts
Dict("a" => 1, "b" => 2)
Dict{String, Integer}("a" => 1, "b" => 2)

Dict(zip(k, v))

# looping
for i in 1:5
  println(i)
end

# from:step:to
for i in [1:1:10;]
  print(i)
end

for i [1:1:10;]
  if i == 5
    continue
  end
end

for (i, x) in enumerate(a)
  print(i)
  print(x)
end

# functions
function foo(a, b)
   return a + b
end

# lambda funcs
x -> x^2 + 1

# or..
f(x, y) = x + y

# unicode names are allowed as well..
∑(x,y) = x + y

# example function with types & default args
function foo(a::Int64, b::String="bar")
  ...
end

# enum
@enum Fruit apple=1 orange=2 kiwi=3
Fruit(1)

# join filepaths
joinpath("dir", "subdir")

# check type
typeof(x)

# convert types
only("A")             # str -> char
parse(Int64, "5000")  # str -> int
parse(Int64, "5000")  # str -> int

# convert array of strings to ints
# dot notation ~ vectorized use of scalar func
parse.(Int8, split("1 2 3"))

# distributions
randn(N)

# tuples
(1, 2, 3)
(a=1, b=2, c=3)

# create empty named tuple with specified types
NamedTuple{(:num, :from, :to), Tuple{UInt8, UInt8, UInt8}}

# map
map(ceil, [0.1, 0.2])
map(x -> func(x, ...), vec)

#
# strings
#

# string concatenation
"foo" * "bar"

# split
split(str)
split(str, "")
split(str, ",")
a, b = split("A B")

s[1:3]
s[4:end]
s[1:end-1]

uppercase(s)
startswith(s, "foo")

# regex replace
replace(s, r"regex" => "bar")

# read file contents
fp = open("in.txt", "r")
txt = read(fp, String)

# or..
for line in readlines(fp)
  ...
end

#
# matrices
#

# create a random matrix
rand(3, 3)

# dim / shape
size(X)

# convert 1 x n matrix to vector
vec(X)

#
# composite types (structs)
#
struct Fruit
  name::String
  size::Int
  foo  # defaults to "Any" if no type specified
end

Fruit("apple", 2, 2.3)

# mutable structs
mutable struct Pet
  const species::String
  age::Int
end

#
# packages
#

# Add BioJulia
registry add https://github.com/BioJulia/BioJuliaRegistry.git

# update packages
update

#
# environments
#
pkg> 
  activate .   # activate env in current dir
  st           # status
pkg>
  activate .
  instantiate  # instantiate someone else's project

#
# DataFrames.jl
#
using DataFrames
df = DataFrame(a=1:4, b=["a", "b", "c", "d"])

df.a

names(df) # colnames; there is no support for named row indices in DataFrames.jl..
names!(df, [:a, :b, :c])   # set names

#
# Tables.jl
#

# load feather/arrow file
using Arrow;
dat = Arrow.Table("data.feather")

# convert to dataframe
using DataFrames
DataFrame(dat)

# all at once
df = DataFrame(Arrow.Table("data.feather"))

# row-wise access
rows = Tables.rows(x)

# column-wise access
columns = Tables.columns(x)

Tables.columnnames(x)
Tables.getcolumn(columns, col)

# copy variable to clipboard
clipboard(x)

