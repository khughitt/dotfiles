# psql
# use single quotes around values in SQL statements
\help   # help
\l      # list dbs
\c db   # connect to "db"
\dt     # show tables
\d tbl  # describe table
\d+ tbl # describe table "+"

\dT          # list enums
\dT+ <enum>  # show enum levels

# save output to file
\o out.txt
...
\o

# add "postgres" user
psql -U postgres

# create db
psql -c 'create database foo'

# interact with pg docker container
docker exec -it <container> /bin/bash
su -l postgres
psql ..

# from host
psql -h db.localhost -U postgres

# provide password via environmental variable
PGPASSWORD=xx psql -h db.localhost -U postgres <dbname>

# create new user + db
createuser --interactive
createdb dbName
psql -d dbName

# psycopg python adaptor
conn = psycopg.connect(host="<host>", dbname="...", user="postgres", password="...")

# once connected, api is similar to sqlite3:
cur = conn.cursor()
cur.execute("...")
cur.fetchone()

conn.commit()
cur.close()

# rollback failed transaction
rollback;
conn.rollback()

# collapse multiple rows into an array
SELECT a, array_agg(b) as b_array
  FROM tbl 
  GROUP BY a;

# collapse multiple rows into a single string
SELECT id, string_agg(foo, ', ') AS foo_list 
  FROM tbl 
  GROUP BY id;

# collapse array column to string
SELECT array_to_string(array_col, ',') from tbl;

# select rows where array is empty
SELECT id FROM tbl WHERE cardinality(foo) = 0;

# format date col
SELECT to_char(time, 'YYYY-mm-dd')

# list triggers in db
SELECT * FROM information_schema.triggers  

# delete trigger
DROP TRIGGER foo ON tbl;

# show trigger functions
\df+

# list & terminate active lock
# https://stackoverflow.com/a/50270661/554531
SELECT t.relname, l.locktype, page, virtualtransaction, pid, mode, granted
  FROM pg_locks l, pg_stat_all_tables t 
  WHERE l.relation = t.relid 
  ORDER BY relation asc;

SELECT pg_terminate_backend(<pid>);

# show queries + pids
SELECT query, pid FROM pg_stat_activity;

# backup db
pg_dump -h <host> -U <user> -d <dbname> > backup.sql
