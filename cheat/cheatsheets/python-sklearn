##########################
#
# dimension reduction
#
##########################

#
# PCA
#
from sklearn.decomposition import PCA
pca = PCA(n_components=2, whiten=False, random_state=1)

# fit & transform separately; useful to get variance explained, etc.
pca = pca.fit(X)
dat = pca.transform(X)
pca.explained_variance_ratio_

# fit & get transformed data in one step
dat = pca.fit_transform(X)

#
# t-SNE
#
from sklearn.manifold import TSNE
tsne_dat = TSNE(n_components=2, perplexity=30.0, metric='euclidean', 
                learning_rate='auto', init='random').fit_transform(dat)

##########################
#
# scale
#
##########################

# standardize
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaler.fit(dat)
scaler.mean_
scaler.transform(dat)

##########################
#
# similarity metrics
#
##########################
sklearn.metrics.pairwise.cosine_similarity(X)

##########################
#
# clustering
#
##########################

#
# spectral clustering
#
from sklearn.cluster import SpectralClustering

num_clust = 5

sc = SpectralClustering(num_clust, eigen_solver='arpack', affinity='rbf', n_init=100, assign_labels='discretize')
sc.fit_predict(dat)  


# using pre-computered similarity scores
sc = SpectralClustering(.., affinity='precomputed')
sc.fit_predict(sim_mat)  
