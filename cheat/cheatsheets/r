# PCA (column-wise)
pca <- prcomp(t(dat), scale = TRUE)

pca_dat <- pca$x[, 1:2]
colnames(pca_dat) <- c("PC1", "PC2")

# compute variance explained
var_explained <- round(summary(pca)$importance[2, 1:2] * 100, 2)

# add labels and plot
pca_dat <- pca_dat %>%
  as.data.frame() %>%
  rownames_to_column('row_label')

plt <- ggplot(pca_dat, aes(x = PC1, y = PC2)) +
  geom_point() +
  xlab(sprintf("PC1 (%.2f%% variance)", var_explained[1])) +
  ylab(sprintf("PC2 (%.2f%% variance)", var_explained[2]))

# UMAP
library(uwot)
umap(t(dat), n_neighbors = 15, n_components = 2, init = 'spectral', scale = FALSE,
     min_dist = 0.01)

# sweep (ex: cpm normalization)
dat[, -1] <- sweep(dat[, -1], 2, colSums(dat[, -1]), '/') * 1E6

# recursively update one list, using another
modifyList(a, b)

# read file as a string
readr::read_file('file.txt')

# json
jsonlite::read_json('input.json')
jsonlite::write_json('output.json')

# json - create a list of dicts
df = data.frame(from=c('a', 'b'), to=c('c', 'd'))
jsonlite::toJSON(df)

# or..
lst = list(list('from'='a', 'to'='b'), list('from'='c', 'to'='d'))
jsonlite::toJSON(lst)

# yaml
yaml::read_yaml(file)

# get filename / extension
tools::file_ext("file.txt")
tools::file_path_sans_ext("file.txt")

# iso 8601 date
strftime(as.POSIXlt(Sys.time(), "UTC"), "%Y-%m-%dT%H:%M:%S%z")

# color map from list of colors
colorRampPalette(c('red', 'blue'))(100)
