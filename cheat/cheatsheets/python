# type hints cheatsheet
https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html

# launch qtconsole from a notebook
%qtconsole

# get unique list items (preserving order)
list(dict.fromkeys(x)) 

# combine multiple lists
list(itertools.chain(list1, list2, list3, ...))
list(itertools.chain(*[list1, list2, list3, ...]))

# flatten/collapse nested lists (itertools)
list(itertools.chain(*regular_list))

# sort list of objects/dicts by key (in place)
lst.sort(key=lambda x: x['foo'], reverse=True)

# sort list of objects/dicts by key (out of place)
sorted(lst, key=lambda x: x['foo'], reverse=True)

# create a dict from lists of keys/values
dict(zip(k, v))

# default dicts
from collections import defaultdict

d = defaultdict(list)  # default "[]"
d = defaultdict(int)   # default "0"

for k,v in d.items():   
  ..

# chunk list
# https://stackoverflow.com/a/312464/554531
def chunks(lst, n):
  for i in range(0, len(lst), n):
      yield lst[i:i + n]

# start a web server
python3 -m http.server 7800

# regex
\s       whitespace
\w       word character ([a-zA-Z0-9_])
\W       non-word character
\b       empty string
(?<!\s)  current position is _not_ preceded by a whitespace character


# regex matching;
# match: left-anchored
# search: anywhere
regex = re.compile(r".*foo")
regex.match(target)
regex.search(target)
regex.sub(pattern, replace, str)

if (regex.search('foo')):
  print('found!')

# findall
re.findall("(.*\.png|.*\.jpg|.*\.jpeg|.*\.svg)", x)

# re match obj
matches = re.search(regex)

if matches:
    ...

for m in matches:
    ... 

matches.group(1)
matches.groups()
matches.groupdict()

# replace space between two specific words in case insensitive manner, while preserving case of
# surrounding words
rep_func = lambda m: m.group(1) + "_" + m.group(2)
re.sub(r"\b(foo)\s+(bar)", rep_func, "FOO BAR", flags=re.I)

# combine dicts
{**x, **y}
x | y # python 3.9

# filter dict ("x[0]" key, "x[1]" value)
dict(filter(lambda x: x[1] == 'foo', mydict.items()))

# get current timestamp
import time
ts = time.time()

# get current date in specified format
import datetime
datetime.datetime.now().strftime("%Y-%m-%d")

# convert unix timestamp to datetime
datetime.fromtimestamp(..)

# get file mtime (cross-platform)
mtime = os.path.getmtime("foo.txt")

# number of seconds since modification?
now = datetime.datetime.now().timestamp()
now - mtime

# read yaml file
with open('cfg.yml') as fp:
    cfg = yaml.load(fp, Loader=yaml.FullLoader)

# write yaml file
with open('foo.yml', 'w') as fp:
    yaml.dump(dict, fp)

# read json from file
with open('file.json') as fp:
  x = json.load(fp)

# json string -> python
x =  '{"foo": "bar"}'
json.loads(x)

# convert json to string
json.dumps({'foo': 'bar'})

# write json to file
with open('out.json', 'w') as fp:
    json.dump({'foo': 'bar'}, fp)

# dealing with numpy datatype encoding 
# https://stackoverflow.com/a/65151218/554531
import json
import numpy as np

def np_encoder(object):
    if isinstance(object, np.generic):
        return object.item()

json.dumps(obj, default=np_encoder)

# download file with urllib.request
import urllib.request

with urllib.request.urlopen("http://<remote>") as fp:
    dat = fp.read()

with open("/path/to/<local>", "wb") as fp:
    fp.write(dat)

# adding request headers
headers = {"User-Agent": "XX"}
req = urllib.request.Request("http://<remote>", headers=headers)

with urllib.request.urlopen(req) as response:
  res = json.loads(response.read())

# md5sum
import hashlib
md5 = hashlib.md5(s.encode("utf-8")).hexdigest()

# pickle
import pickle
pickle.dump(obj, open("out.p", "wb"))
pickle.load(open("out.p", "rb"))

# replace (see re.sub for regex replaces)
str.replace('foo', 'bar')
str.replace('foo', 'bar', 1)

# f-string decimal place formatting
f"{foo:.2f}"

# f-string leading zeros
f"{123:06}"

# recursive directory walk (does not include hidden files)
for file in glob.iglob('**/**', recursive=True):
     print(file)

# recursive directory walk (includes hidden files)
list(pathlib.Path("path/").glob("**/*.*"))

# mkdir (pathlib)
path = pathlib.Path(..)
path.mkdir(mode=0o755, parents=True, exist_ok=True)

# pathlib basics
path.joinpath("foo")

# create a temp dir
import tempfile
tempfile.mkdtemp

# random sample (with seed)
random.seed(321)
random.sample(lst, 5)

# reload module
import importlib
importlib.reload(foo)

# update sys.path (e.g. after "pip -e" installing a package)
# https://stackoverflow.com/a/25384923/554531
import site
from importlib import reload
reload(site)

# profile script
python -m cProfile -o profile.log <script>
snakeviz profile.log
