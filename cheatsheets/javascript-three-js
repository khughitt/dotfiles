// 
// basic setup
// 
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 10;

const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight); 
document.body.appendChild(renderer.domElement);

scene.add(...);

function animate() {
  requestAnimationFrame( animate );
  ...
  renderer.render( scene, camera );
}
animate();

// transformations ("TRS")
.position // translation
.rotation // rotation
.scale    // scaling

// coordinates / positioning 
// default camera pos: front-to-back (towards -z) with +y above.
x left/right
y top/bottom
z forward/backward ("-z" towards screen)

// rotating a plane
x forward/backward
y about vertical axis on screen
z corners moving in circles (see same face of place)

// BufferGeometry
// - base geometry class
// - includes several _attribute_ arrays: position, color, uv, etc.
// - each index in the arrays corresponds to the attributes for a single vertex

// setup react/three env
pnpx create-react-app <name>
pnpm add three three-stdlib three-spritetext @react-three/fiber bootstrap

// modifying geom vertices (set, setX, setXYZ, etc.)
geom.attributes.position.setXYZ(ind, val)

// ShaderMaterial
// https://medium.com/@sidiousvic/how-to-use-shaders-as-materials-in-three-js-660d4cc3f12a
const uniforms = {
  u_resolution: { value: { x: null, y: null } },
  u_time: { value: 0.0 },
  u_mouse: { value: { x: null, y: null } },
}

const materialInnner = new THREE.ShaderMaterial({
  vertexShader: vShader,
  fragmentShader: fShader,
  uniforms;
})

// create an array of points
const [coords, setCoords] = useState<THREE.Vector3[]>([])

Object.values(coords).forEach((pos:number[]) => {
  coords.push(new THREE.Vector3(pos[0], pos[1], pos[2]))
})

// math
THREE.MathUtils.randFloatSpread(100);   // random float in [-range / 2, range / 2].

// vectors
let vec1 = new THREE.Vector3(0, 1, 1)
let vec2 = new THREE.Vector3(2, 0, 0)
let vec3 = vec1.clone().add(vec2)
vec1.multiplyScalar(1.5)

// trouble-shooting
// 1. light sources?
// 2. materials?
// 3. fog?
// 4. axes/grid helpers

// vi:syntax=javascript
