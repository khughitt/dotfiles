# undo push
git reset --soft "HEAD^"  # undos local commit
git push -f               # pushes previous commit

# unstage all changes
git reset

# unstage file
git reset <file>

# restore deleted file (uncommitted)
git checkout HEAD <file>

# revert all changes
git checkout .

# checkout most recent commit
git checkout <branch>

# show changes made in most recent commit
git show HEAD

# show an earlier version of a file
git show <commit>:api/pyproject.toml
git show HEAD~2:api/pyproject.toml

# show all changes made to a file
git log -p -- file

# show all commits made to a file
git rev-list HEAD --oneline

# show branch history
git log --oneline --graph
git log --oneline --graph --all --decorate

# show files that different between two commits
git diff --name-only 629feca
git diff --name-status 629feca
git diff --name-status 629feca 3e0800d

# gui diff (e.g. meld)
git difftool 629fec
git difftool 629feca file.py

# edit commit message
git commit --amend

# create & push a tag
git tag -a v1.0 -m "..."
git push origin v1.0

# reset to a specific commit
git reset <commit>

# show all changes to a single file
git rev-list HEAD --oneline <file>

# show what changed in a single file for a specific commit
git show <commit> -- <file>

# save changes in detached head
git branch alt-history
git checkout alt-history

# search history for a specific string
git log -S password
git log -S password -- file.py

# search history for [D]eleted file with name "foo"
git log --all --stat --diff-filter=D --oneline | grep "foo"

# search commit messages
git log --all --grep='..'
git log --all --grep='..' -i   # case insensitive
git log --all --grep='..' --oneline --decorate

# initialize submodules
git submodule update --init --recursive

# update submodules
git pull --recurse-submodules

# add upstream
git remote add upstream <repo>

# list remotes
git remote -v

# list all branches
git branch -a

# fetch all remote branches
git fetch --all

# clean up old remotes
git remote prune origin --dry-run

# rename local branch
git branch -m old new

# use main branch version of file when conflicts are encountered
git checkout --theirs <file>
git add <file>

# testing out someone else's fork
git remote add wafels https://github.com/wafels/sunpy.git
git fetch wafels
git checkout wafels/master

# find all binaries in repo history
# https://stackoverflow.com/questions/27931520/git-find-all-binary-files-in-history
git log --all --numstat \
    | grep '^-' \
    | cut -f3 \
    | sed -r 's|(.*)\{(.*) => (.*)\}(.*)|\1\2\4\n\1\3\4|g' \
    | sort -u

# remove file from history
bfg --delete-files YOUR-FILE-WITH-SENSITIVE-DATA
git reflog expire --expire=now --all && git gc --prune=now --aggressive
git push --force

# remove a single file without deleting it
git rm --cached <file>

# remove a directory without deleting it
git rm --cached -r <dir>

# search history for a deleted file
git log --all --full-history -- "**/thefile.*"

# rename "master" -> "main" (assuming branch has been renamed on github..)
git branch -m master main
git fetch origin
git branch -u origin/main main 
git remote set-head origin -a
git remote prune origin

# delete local branch
git checkout main
git branch --delete foo

# delete remote branch
git push origin --delete feature-branch-name
