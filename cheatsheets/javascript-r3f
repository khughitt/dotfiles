// install r3f + other useful libraries
npm install three @types/three @react-three/fiber @react-three/drei \
  three-custom-shader-material @react-three/postprocessing maath leva

// imports
import * as THREE from 'three'
import { Suspense, useRef } from 'react'
import { Canvas, useFrame, useThree, ThreeElements } from '@react-three/fiber'
import { OrbitControls } from '@react-three/drei'
import { EffectComposer, Bloom } from '@react-three/postprocessing'

// setup
<Canvas 
  style={{ background: "#333333", width: "100vw", height: "100vh" }}
  camera={{ fov: 45, position: [0, -10, 0] }}
>
  <Suspense fallback={null}>
    <EffectComposer>
      <Bloom intensity={0.5} luminanceThreshold={1} />
    </EffectComposer>
  </Suspense>
</Canvas>)

// nested properties
<mesh rotation-x={1} material-color={'red'} material-uniforms-foo-value: {1.0} />

// mesh / geom / material
<mesh position={[0, 0, -1]}>
  <planeGeometry args={[2, 2]} />
  <meshStandardMaterial color='#aabbcc' />
</mesh>

// custom meshes
const ColorBox = (props: ThreeElements['mesh']) => {
  const meshRef = useRef<THREE.Mesh>(null!)
  const [color, setColor] = useState("#ffffff")

  useEffect(() => {
    if (meshRef.current === null) return
    setColor(meshRef.current.userData.color)
  }, [meshRef.current])

  return (
    <mesh {...props} ref={meshRef}>
      <boxGeometry />
      <meshStandardMaterial color={color} />
    </mesh>
  )
}
<ColorBox scale={1.0} userData={{"color": "#00ff00"}} />

// lights
<directionalLight position={[1, 0, 0]} color={"#00ffff"} intensity={1.0} />

// mouse support
<OrbitControls  target={[0, 0, 0]} />

// ref
const meshRef = useRef<THREE.Mesh>(null!)

// type for ref passed as a prop
React.RefObject<THREE.Mesh<THREE.BufferGeometry>>

// animation
useFrame((_, delta) => (meshRef.current.rotation.y += delta / 2.0))

// textures
import { useTexture } from "@react-three/drei"

const props = useTexture({
  map: 'map.jpg',
  displacementMap: '..',
  normalMap: '..',
  roughnessMap: '..',
  aoMap: '..',
})
<meshStandardMaterial {...props} />

// ShaderMaterial
import fragShader from './shaders/frag.glsl'
import vertexShader from './shaders/vertex.glsl'

const materialRef = useRef<THREE.ShaderMaterial>(null!)

// initial uniform values
const uniforms = useMemo(() => ({
  uTime: {
    value: 0.0
  },
  ...
}), [])

useEffect(() => {
  materialRef.current.uniforms.uColorScale.value = colorScale;
}, [colorScale])

useFrame((state) => {
  const { clock } = state;
  pointsRef.current.material.uniforms.uTime.value = clock.elapsedTime * 0.1;
});

<shaderMaterial
  ref={materialRef}
  vertexShader={vertexShader}
  fragmentShader={fragShader}
  depthWrite={false}
  uniforms={uniforms}
/>

// fog
<fog attach="fog"  color="#eeeeee" near={1} far={14} />
<fogExp2 attach="fog"  color="#eeeeee" density={0.025} />

// leva
import { useControls } from 'leva'
const { param } = useControls({ param: 2.0 })

// helpers
import { useHelper } from "drei"
useHelper(spotLight, THREE.SpotLightHelper, "pink")
useHelper(pointLight, THREE.PointLightHelper, 0.5, "cyan")

<axesHelper args={[50]} />
<gridHelper args={[200, 200, 0xff0000, 'cyan']} />

// vi:syntax=javascript
