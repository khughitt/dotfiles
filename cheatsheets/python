# type hints cheatsheet
https://mypy.readthedocs.io/en/stable/cheat_sheet_py3.html

# type aliases
type Foo = str | float

# generics
def max[T](args: Iterable[T]) -> T:

# launch qtconsole from a notebook
%qtconsole

# get unique list items (preserving order)
list(dict.fromkeys(x)) 

# flatten ("collapse" / "combine") multiple lists
sum(list_of_lists, [])
list(itertools.chain(*list_of_lists))
list(itertools.chain(list1, list2, list3, ...))

# sort list of objects/dicts by key (in place)
lst.sort(key=lambda x: x["foo"], reverse=True)

# sort list of objects/dicts by key (out of place)
sorted(lst, key=lambda x: x["foo"], reverse=True)

# sort list of objects to match order of ids in separate list (in place)
lst.sort(key=lambda x: ids.index(x["id"]))

# shift specific item to front of a list
for i, item in enumerate(lst):
    if item.foo == 'xx':
        x = lst.pop(i)
        lst.insert(0, x)
        break

# sort values in one list based on values in another list
a = ["b", "c", "a"]
b = [0.5, 0.1, 1.0]
[x[0] for x in sorted(zip(a, b))]  # ["a", "b", "c"]

# create a dict from lists of keys/values
dict(zip(k, v))

# concat dicts (out-of-place)
a | b

# get index of item in list
lst.index('foo')

# get index of min/max item in list ("which.max")
lst.index(max(lst))

# default dicts
from collections import defaultdict

d = defaultdict(list)  # default "[]"
d = defaultdict(int)   # default "0"

for k,v in d.items():   
  ..

# chunk list
# https://stackoverflow.com/a/312464/554531
def chunks(lst, n):
  for i in range(0, len(lst), n):
      yield lst[i:i + n]

# start a web server
python3 -m http.server 7800

# regex
\s       whitespace
\w       word character ([a-zA-Z0-9_])
\W       non-word character
\b       empty string
(?:...)  non-capturing
(?<!\s)  current position is _not_ preceded by a whitespace character
[^a-z]   match any character _except_ lowercase letters

# regex matching;
# match: left-anchored
# search: anywhere
regex = re.compile(r".*foo")
regex.match(target)
regex.search(target)
regex.sub(to, target)

re.sub(pattern, replace, str)

if (regex.search("foo")):
  print("found!")

# findall
re.findall("(.*\.png|.*\.jpg|.*\.jpeg|.*\.svg)", x)

# regex split
re.split(pattern, string)

# re match obj
matches = re.search(regex)

if matches:
    ...

for m in matches:
    ... 

matches.group(1)
matches.groups()
matches.groupdict()

# multiline regex (also, re.MULTILINE flag)
code_regex = re.compile(r"```(.+)((?:\n.+)+)```")

# replace space between two specific words in case insensitive manner, while preserving case of
# surrounding words
rep_func = lambda m: m.group(1) + "_" + m.group(2)
re.sub(r"\b(foo)\s+(bar)", rep_func, "FOO BAR", flags=re.I)

# combine dicts
{**x, **y}
x | y # python 3.9

# filter dict by key
dict(filter(lambda x: x[0] not in exclude, dat.items()))

# filter dict by value
dict(filter(lambda x: x[1] == "foo", dat.items()))

# or..
{k:v for (k,v) in d.items() if v > 0}

# get current timestamp
import time
ts = time.time()

# get current date in specified format
import datetime
today = datetime.datetime.now().strftime("%Y-%m-%d")

# "Dec 26, 2024"
date.strftime("%b %d, %Y")

# convert unix timestamp to datetime
datetime.fromtimestamp(..)

# datetime to ISO-8601 date
dt.isoformat()

# add/subtract from datetime
from datetime import timedelta
t0 = t1 - timedelta(days=7)

# get file mtime (cross-platform)
mtime = os.path.getmtime("foo.txt")

# number of seconds since modification?
now = datetime.datetime.now().timestamp()
now - mtime

# read yaml file
with open("cfg.yml") as fp:
    cfg = yaml.load(fp, Loader=yaml.FullLoader)

# write yaml file
with open("foo.yml", "w") as fp:
    yaml.dump(dict, fp)

# read json from file
with open("file.json") as fp:
  x = json.load(fp)

# read json from url
import urllib.request, json 

with urllib.request.urlopen("") as url:
    dat = json.load(url)

# json string -> python
x =  "{'foo': 'bar'}"
json.loads(x)

# convert json to string
json.dumps({"foo": "bar"}, indent=2)

# write json to file
with open("out.json", "w") as fp:
    json.dump({"foo": "bar"}, fp)

# dict -> url params
import urllib.parse
urllib.parse.urlencode({'x':5, 'y': 'six'})

# dealing with numpy datatype encoding 
# https://stackoverflow.com/a/65151218/554531
import json
import numpy as np

def np_encoder(object):
    if isinstance(object, np.generic):
        return object.item()

json.dumps(obj, default=np_encoder)

# download file with urllib.request
import urllib.request

with urllib.request.urlopen("http://<remote>") as fp:
    dat = fp.read()

with open("/path/to/<local>", "wb") as fp:
    fp.write(dat)

# download and extract .tar.gz file
import urllib.request
import tarfile 
from io import BytesIO

with urllib.request.urlopen(url) as stream:
    with tarfile.open(name=None, fileobj=BytesIO(stream.read())) as fp:
        fp.extractall("/dir")

# adding request headers
headers = {"User-Agent": "XX"}
req = urllib.request.Request("http://<remote>", headers=headers)

with urllib.request.urlopen(req) as response:
  res = json.loads(response.read())

# url encode / decode
urllib.parse.quote
urllib.parse.unquote

# md5sum
import hashlib
hashlib.md5(string.encode("utf-8")).hexdigest()          # string
hashlib.md5(open("foo.txt","rb").read()).hexdigest()     # file

# pickle
import pickle
pickle.dump(obj, open("out.p", "wb"))
pickle.load(open("out.p", "rb"))

# replace (see re.sub for regex replaces)
str.replace("foo", "bar")
str.replace("foo", "bar", 1)

# f-string decimal place formatting
f"{foo:.2f}"

# f-string leading zeros
f"{123:06}"

# recursive directory walk (does not include hidden files)
for file in glob.iglob("**/**", recursive=True):
     print(file)

# recursive directory walk (includes hidden files)
list(pathlib.Path("path/").glob("**/*.*"))

# delete file/folder (pathlib)
p.unlink(..)
p.rmdir(..)

# delete file/folder (os/shutil)
os.remove(path)
os.rmdir(path)
shutil.rmtree(path)

# mkdir (os)
os.mkdir(path, mode=0o755)
os.makedirs(path, mode=0o755, exist_ok=True) # recursive

# mkdir (pathlib)
path = pathlib.Path(..)
path.mkdir(mode=0o755, parents=True, exist_ok=True)

# pathlib basics
path.exists()
path.name
path.parent
path.parts
path.stem
path.suffix
path.suffixes

path.joinpath("foo", "bar")
path.expanduser()

# create temp file/dir
import tempfile
tempfile.mktemp()
tempfile.mkdtemp()

# random sample (with seed)
random.seed(321)
random.sample(lst, 5)

# hex <-> rgb colors
# https://stackoverflow.com/a/71804445/554531
def rgb_to_hex(rgb:tuple[int, int, int]) -> str:
    return "#%02x%02x%02x" % rgb

def hex_to_rgb(hexa:str) -> tuple[int, int, int]:
    return tuple(int(hexa[i:i+2], 16)  for i in (1, 3, 5))

# rgb <-> hsv
from colorsys import rgb_to_hsv, hsv_to_rgb

# reload module
import importlib
importlib.reload(foo)

# update sys.path (e.g. after "pip -e" installing a package)
# https://stackoverflow.com/a/25384923/554531
import site
from importlib import reload
reload(site)

# profile script
python -m cProfile -o profile.log <script>
snakeviz profile.log

# nested dictionary indexing
from functools import reduce
path = ["root", "a"]
reduce(lambda arr, ind: arr[ind], path, tree)

# UUIDs
from uuid import uuid1
str(uuid1())

# combinations & permutations
from itertools import combinations, permutations 
combinations(lst, k)
permutations(lst, k)

# vi:syntax=python
