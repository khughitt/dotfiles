# select unique
SELECT DISTINCT(x) FROM y;

# create db
CREATE DATABASE x;

# delete db
DROP DATABASE x;

# delete db (postgres / force)
DROP DATABASE x WITH(force);

# delete table
DROP TABLE x;

# rename table
ALTER TABLE tbl
  RENAME TO y;

# rename column
ALTER TABLE tbl
  RENAME COLUMN old TO new;

# delete rows
DELETE FROM tbl
  WHERE ..

# delete column
ALTER TABLE tbl
  DROP COLUMN foo;

# change column
ALTER TABLE tbl
  ALTER COLUMN foo TYPE ..,
  ALTER COLUMN foo SET DEFAULT ..
  ALTER COLUMN foo DROP NOT NULL

# add columns
ALTER TABLE tbl 
  ADD COLUMN col1 ...,
  ADD COLUMN col2 ...

# add label to existing enum
ALTER TYPE enum_name ADD VALUE '...';

# rename enum (automatically updates name in table defs)
ALTER TYPE old RENAME TO new;

# rename enum label
ALTER TYPE foo RENAME VALUE 'old' TO 'new'

# delete enum
DROP TYPE foo;

# rename index
ALTER INDEX old RENAME TO new;

# where .. or
SELECT ..
  WHERE a='foo' OR a='bar'

# change values
UPDATE tbl 
  SET a='1', b='2',..
  WHERE ..

# match by value in array
SELECT * FROM tbl
  WHERE col = ANY('{a,b,c}');

# get rows where array column includes some value
SELECT * FROM tbl 
  WHERE 'foo' = ANY(array_col);

# subqueries
SELECT ..
  INNER JOIN (
    SELECT ...
  ) AS foo
ON ..

INSERT INTO tbl(a, b, c) 
  VALUES ((SELECT id FROM ...), 'b', 'c');

# find duplicates
SELECT a, b, COUNT(*)
  FROM tbl
  GROUP BY a,b
  HAVING COUNT(*) > 1;

# find duplicates / get ids
SELECT x.*
  FROM tbl x
  JOIN (
    SELECT a, b, COUNT(*)
      FROM tbl1
      GROUP BY a,b
      HAVING COUNT(*) > 1)
    ) y
  ON x.a = y.a
  AND x.b = y.b;


