# create NaN matrix (float matrices only)
a = np.empty((3, 3,))
a.fill(np.nan)

# numpy dtype (e.g. int64) to python type
x.item()

# concatenate arrays
np.concatenate([a, b])

# generate sequence of numbers (start, stop, num)
np.linspace(0, 1, 100)

# matrix of zeros
np.zeros(12).reshape(3, 4)

# matrix of ""'s
np.full(100, 1e5).reshape((10, 10))

# matrix to array
m.A1

# flatten/unroll array
arr.ravel()

# diagonal
np.diagonal(a)
np.fill_diagonal(a, 0)

# get off-diagonal values
a[np.where(~np.eye(a[0], dtype=bool))]

# apply function along row/cols
np.apply_along_axis(func, axis, a)

# random uniform matrix in [0, 1]
np.random.rand(3, 4)

# random normal (rnorm)
np.random.normal(0, 1, 100)

# count number of nonzero values along rows/cols
np.count_nonzero(arr, axis=1)
np.count_nonzero(np.array(mat), axis=1)

# stack vector rows
np.vstack((a, b))

# get indices with non-zero values for both of two vectors
ind = np.where(np.logical_not((np.vstack((vec1, vec2)) == 0).all(axis=0)))

# sample n values from an array
np.random.choice(arr, 3)

# sample n values from a matrix
np.random.choice(mat.ravel(), 3)

# weighted sampling
np.random.choice(arr, k, replace=False, p=weights)

# sample n values from an array, specifying random seed
rng = np.random.default_rng(321)
rng.choice(arr, 3)

# shuffle array (in-place)
rng.shuffle(array)

# quantiles
np.quantile(dat, np.arange(0, 1.01, 0.05))

# iterate over upper-triangular matrix indices, excluding diagonal
ind = np.triu_indices(a.shape[0], k=1)
a.values[ind]

# pearson correlation (operates on rows by default; pandas on columns)
np.corrcoef(X)

# fit a polynomial
from numpy.polynomial import Polynomial
model = Polynomial.fit(x, y, deg)

print(model)
model(x)

# read/write npz
np.savez("dat.npz.", foo=arr)

with np.load("dat.npz") as data:
  arr = data["foo"]

# vi:syntax=python
