-- compilation
ghc --make -dynamic -o foo foo.hs

-- basic script structure
module Main where
...
main = ..

-- built-in types
1       -- Int
1.0     -- Float
1.0     -- Double
True    -- Bool
'x'     -- Char
"Foo"   -- String
()      -- "unit" (empty tuple)
(5, "foo")        -- tuple
[1, 2, 3]         -- list
[[1, 2], [3, 4]]  -- nested list

-- type?
:t "foo"
:t func

-- type cast
show 5 -- any -> str

-- let / where
-- https://wiki.haskell.org/Let_vs._Where
let x = 5
    y = z + 1
in ..

.. 
where x = 5
      y = z + 1

-- negation
not a

-- "not equal"
a /= b

-- strings
a <> b    -- concatenation
a ++ b    -- concatenation (old way..)
lines a   -- split string on newlines

-- lists
a !! 3     -- indexing
a <> b     -- concatenation
a ++ b     -- concatenation (old way..)
1 : [2,3]  -- add element to front of list ("cons")
head x
tail x
tail "foo"
take 2 x   -- get first two elements
drop 2 x   -- get all elements *except* the first two
null x     -- is empty?
length x
reverse x
i `elem` x -- membership

zip [1,2,3] ['a', 'b', 'c'] -- lst + lst -> lst of tuples

-- math
mod 5 3   -- modulo

-- ranges / list enumeration
[1..10]
[10,9..1]
[1.0,1.5..100.0]
['a'..'z']

-- list comprehension
[x^2 | x <- [1..10]]          -- map
[x^2 | x <- [1..10], odd x]   -- map + filter

-- tuples
x = (1, 'a')
fst x   -- get first item from a two-element tuple
snd x   -- get second item from a two-element tuple

-- conditionals
if ..
then ..
else ..

-- functions
add a b = a + b
add 1 2

-- guards

func args
  | cond1 = ...
  | cond2 = ...
  | otherwise ...

-- higher-order functions

--- map (apply)
map fxn [1..10]
fmap fxn [1..10]

--- filter
filter odd [1..10]

--- fold (reduce)
foldl (+) 0 [1..10]

-- lambdas

\a b -> a <> b

-- function application operator
g $ f 1 2       -- g (f 1 2)

-- composition
h = g . f       -- "f then g.."

-- printing
putStrLn "..."  -- print string
print 5         -- print any; i.e. "printStrLn (show x)"

-- math
min a b
minimum [1, 3, 5]
odd 5

-- vi:syntax=haskell
