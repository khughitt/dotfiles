// canvas-sketch
canvas-sketch foo.js --hot
canvas-sketch foo.js --new --open

//
// basic vertex shader
//
varying vec2 vUv;

void main() {
  vUv = uv;
  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
}

//
// basic fragment shader
//
varying vec2 vUv;

void main() {
  // map texture coords x -> red, y -> green
  // gl_FragColor = vec4(vUv.x, vUv.y, 0.0, 1.0);

  // spread sine wave cycle across y dim
  float color = (sin(2.0 * PI * vUv.y) + 1.0) / 2.0;
  gl_FragColor = vec4(vec3(color), 1.0);

  // moving sine wave (_add_ uTime to change direction)
  float color = (sin(2.0 * PI * vUv.y - uTime) + 1.0) / 2.0;
}

// basic functions
abs()
sign()
floor()
min()
max()
ceil()
fract()
sqrt()
log()
log2()
pow(x, 2.0)
exp()
mod()
clamp(x, min, max) // clip (?)

// trig
radians(deg)
degrees(rad)
sin()
cos()
tan()
asin()
acos()
atan()

// geom
length()          // vector length
distance(a, b)
dot(a, b)
cross(a, b)
norm(a)

faceforward(norm, inc, ref)
reflect(inc, norm)
refract(inc, norm, ratio)

// boolean logic
&&   // AND
||   // OR
^^   // XOR

// ternary if
x ? a : b

// initialize zero vec
vec3 color = vec3(0.0);

// returns 0.0/1.0, if below/above cutoff
step(cutoff, val)

// linear weighted interpolation (b * weight + a * (1.0 - weight))
mix(a, b, weight)  

// smooth weighted interpolation (cubic / "Hermite" interpolation)
smoothstep(a, b, weight)

// triangle wave
abs(2.0 * fract(x) - 1.0)

// functions
float foo(float a) {
  return a;
}


// refs
// 1. https://thebookofshaders.com/
// 2. https://shaderific.com/glsl

// vi:syntax=glsl
