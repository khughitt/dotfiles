# tibble row -> vec
unlist(tbl[1, ])

# tibble col -> vec
pull(df, 1)
pull(df, "symbol")

# summarize_all
dat %>%
  group_by(symbol) %>%
  summarize(across(everything(), max))

# dynamic variable names
!!sym(foo)

# select by string variable (dynamic)
dat %>%
    select(all_of(var_name))

# filter by string variable
dat %>%
    filter(!!rlang::sym(var_name) > 0)

# select columns whose name starts with "foo"
dat %>%
  select(starts_with("foo"))

# select columns whose names contain "foo"
dat %>%
  select(matches("foo"))

# arrange by string variable
dat %>%
    arrange(!!sym(var_name))

# rbind multiple tibbles
bind_rows(df1, df2, ..)

# rename columns
df %>%
  rename("new"=old)
df %>%
  rename(!!new := old)

# fix column types
df %>%
  mutate(across(4:10, as.double))

# convert column to factor
df %>%
  mutate(foo=as_factor(foo))

# convert column to factor and specify order of levels
df %>%
  mutate(foo=fct_relevel(foo, 'a', 'b', 'c'))

# get first row as two-column key-value dataframe;
# "glimpse()" can also be used, but dataframe easier to format in rmd
df[1, ] %>%
  t() %>%
  as.data.frame() %>%
  rownames_to_column("field")

# cbind / join list of tables
purrr::reduce(tbls, dplyr::full_join, by="id")

# create a tibble from a list of lists (types may be lost..)
cnames <- c('a', 'b')

lst %>%
  map_dfr(set_names, cnames) %>%
  as_tibble()

# get lengths of list column values
df %>%
  mutate(num_genes=length(genes))

# drop duplicates (unique)
dat %>%
  distinct()

# complete.cases
dat %>%
  na.omit()

# pivot wide to long
df %>%
  pivot_longer(everything(), names_to="xx", values_to="yy")

df %>%
  pivot_longer(c("col1", "col2",...), names_to="xx", values_to="yy")

df %>%
  pivot_longer(!col, names_to="xx", values_to="yy")

df %>%
  pivot_longer(!c(col1, col2,..), ..)

# long to wide
df %>%
  pivot_wider(id_cols=zz, names_from=xx, values_from=yy)

# replace string values
df %>%
  mutate(foo=str_replace(foo, 'bla', ''))
df %>% 
  mutate(foo=str_replace_all(foo, c('old1'='new1', 'old2'='new2')))

# recode variable levels
df %>% 
  mutate(foo=recode(foo, old1="new1", old2="new2", ...))

# create new logical column based on string presence
df %>% 
  mutate(new_col=str_detect(existing_col, 'foo'))

#
# filtering
#

# string matching (starts with, ends with, regex..)
df %>%
  filter(str_detect(foo, "^bar"))

#
# rank
#
df %>%
  mutate(Rank=dense_rank(foo))
df %>%
  mutate(Rank=dense_rank(desc(foo)))

#
# summarization
#

# concatenate string field by group
df %>% 
  group_by(grp) %>% 
  summarise(combined=paste(foo, collapse=", "))

# get first few entries within each group
df %>% 
  group_by(grp) %>% 
  arrange(x) %>%
  slice_head(n=3)

# group by -> min/max within each group
df %>% 
  group_by(grp) %>% 
  slice(which.min(foo))

# count variable levels by group
df %>%
  count(a, b)

# or..
df %>%
  group_by(a, b) %>%
  summarize(n=n())

# vi:syntax=r
