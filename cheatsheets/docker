# build an image
docker build .

# build an image (clean)
docker build --no-cache .

# list all images
docker images

# list containers
docker ps -a

# run a container
docker run <name or id>

# rebuild a single container with compose
docker-compose up -d --build <container>

# run a container, specify volumes, port, etc.
docker run --rm -p 80:3838 -v /from:/to <container id>

# run a container without exiting
docker run -dit <image id>
docker exec -it <container id> /bin/bash

# open tty in a running container
docker exec -it <container id> /bin/zsh

# commit changes made to a container
docker commit -a 'Keith Hughitt' -m 'Initial commit' 

# set name and tag for an image
docker tag <image id> tag
docker tag <image id> repo:tag

# list unused containers
docker container ls -a --filter status=exited --filter status=created 

# launch docker compose & build needed containers
docker-compose up --build

# bring up a single service
docker-compose start foo

# stop a single container
docker kill <container_id>

# stop all running containers
docker kill $(docker ps -q)

# stop docker compose & removed orphaned containers
docker-compose down --remove-orphans

# remove all stopped containers
docker container prune 

# clear cache / free up space (check /var/lib/xx as sudo to check space used..)
docker system prune -a -f

# run a single container with docker compose
docker-compose run <id>

# stop a single container with docker compose
docker-compose rm -sv <service>

# get the ip addr and port of a running container
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container-name OR id> 

# copy file from inside container to host
docker cp <container>:from/file.txt to.txt

# keep container open/running
ENTRYPOINT ["tail", "-f", "/dev/null"]
