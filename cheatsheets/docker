# build an image
docker build .

# build an image (clean)
docker build --no-cache .

# list all images
docker images

# list containers
docker ps -a

# run a container
docker run <name or id>

# run a container, specify volumes, port, etc.
docker run --rm -p 80:3838 -v /from:/to <container id>

# run a container without exiting
docker run -dit <image id>
docker exec -it <container id> /bin/bash

# open tty in a running container
docker exec -it <container id> /bin/zsh

# commit changes made to a container
docker commit -a 'Keith Hughitt' -m 'Initial commit' 

# set name and tag for an image
docker tag <image id> tag
docker tag <image id> repo:tag

# list unused containers
docker container ls -a --filter status=exited --filter status=created 

# stop a single container
docker kill <container_id>

# stop all running containers
docker kill $(docker ps -q)

# rebuild a container
docker rm -f <container_name_or_id>
docker-compose up -d --build <service_name>

# rebuild a container without using cache
docker rm -f <container_name_or_id>
docker-compose build --no-cache <service_name>
docker-compose up -d <service_name>

# launch docker compose & build needed containers
docker-compose up --build

# rebuild a single container with compose
docker-compose up --build -d <container>

# stop docker compose & removed orphaned containers
docker-compose down --remove-orphans

# "Resource is still in use"
docker compose --profile optional down

# bring up a single service
docker-compose start foo

# run a single container with docker compose
docker-compose run <id>

# stop a single container with docker compose
docker-compose rm -sv <service>

# check logs
docker compose logs traefik
docker compose logs traefik  --tail 20

# check open ports inside container / make sure expected port is being used
docker compose exec traefik netstat -tlnp

# pass host environmental variable
environment:
  - XYZ
  - FOO=$BAR

# keep container running
command: "tail -f /dev/null"

# remove all stopped containers
docker container prune 

# clear cache / free up space (check /var/lib/xx as sudo to check space used..)
docker system prune -a -f

# inspect data volumes
docker volume ls | grep couchdb_data
docker volume inspect <volume_name>

# get sizes of all volumes
docker system df --verbose --format '{{ range .Volumes }}{{ .Name }} {{ .Size }}\n{{ end }}'

# docker disk usage by image, containers, volumes..
docker system df

# remove all dangling images >N hours ago
# https://docs.docker.com/reference/cli/docker/image/prune/
docker image prune --all --filter until=168h

# remove docker data volumes (careful..)
docker system prune -a -f --volumes

# get the ip addr and port of a running container
docker inspect --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' <container-name OR id> 

# copy file from inside container to host
docker cp <container>:from/file.txt to.txt

# keep container open/running
ENTRYPOINT ["tail", "-f", "/dev/null"]
