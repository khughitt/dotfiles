#!/usr/bin/python
"""
Hack-ish image-to-color palette script
kh (oct23)

- requires ImageMagick (`convert`)
- code for dominant color selection adapted from: https://github.com/LanceGin/haishoku 
  (modified to allow for > 8 colors to be requested)

Dominant colors are chosen usen the approach from Haishoku and extended to include complement
colors.

Usage:

  python haishoku <input image> <outfile.png>

In addition to a color PNG color palette, a .json file with the hex colors from the palette is also
created.
"""
import sys
import subprocess
import tempfile
import urllib.request, io
from pathlib import Path
from PIL import Image
from colorsys import rgb_to_hsv, hsv_to_rgb

def main():
    if len(sys.argv) != 3:
        print("Incorrect number of input arguments specified!")

    infile = sys.argv[1]
    outfile = sys.argv[2]

    # intermediate file names (one for each row in the resulting palette)
    tmp1 = tempfile.mkstemp(suffix='.png')[1]
    tmp2 = tempfile.mkstemp(suffix='.png')[1]
    tmp3 = tempfile.mkstemp(suffix='.png')[1]

    # use haishoku to get a color palette from the input image
    base_colors = [x[1] for x in getPalette(infile)]

    # extend to include desaturated and complementary versions of each color
    desaturated = []
    complements = []

    for rgb in base_colors:
        desaturated.append(desaturate(rgb, 0.2))     
        complements.append(complement(*rgb))

    create_palette_row(base_colors, tmp1)
    create_palette_row(desaturated, tmp2)
    create_palette_row(complements, tmp3)

    # stack rows and write out final palette image
    cmd = f"convert {tmp1} {tmp2} {tmp3} -append {outfile}"

    subprocess.run(cmd, shell=True)

    # store hex colors in a .json file with the same basename
    json_outfile = Path(outfile.replace('.png', '.json')).expanduser()
    hex_colors = ['"' + rgb_to_hex(x) + '"' for x in base_colors + desaturated + complements]

    json_txt = "[" + ", ".join(hex_colors) + "]"

    with open(json_outfile, 'wt') as fp:
        fp.write(json_txt)

def create_palette_row(colors, path:str):
    # use imagemagick to construct a palette
    cmd = "convert -size 64x64 "

    for rgb in colors:
        hex = rgb_to_hex(rgb)
        cmd += f"xc:\"{hex}\" "

    cmd += f"+append {path}"

    subprocess.run(cmd, shell=True)

def desaturate(rgb:tuple[int, int, int], diff=0.1) -> tuple[int, int, int]:
    """get desaturated version of rgb color"""
    hsv = rgb_to_hsv(*rgb)
    sat = max(0, hsv[1] - diff)
    
    rgb2 =  hsv_to_rgb(hsv[0], sat, hsv[2])

    return (round(rgb2[0]), round(rgb2[1]), round(rgb2[2]),)

def complement(r, g, b) -> tuple[int, int, int]:
    """
    get color complement

    source: https://stackoverflow.com/a/40234924/554531
    """
    k = hilo(r, g, b)
    return tuple(k - u for u in (r, g, b))

# Sum of the min & max of (a, b, c)
def hilo(a, b, c):
    if c < b: b, c = c, b
    if b < a: a, b = b, a
    if c < b: b, c = c, b
    return a + c

def sort_by_rgb(colors_tuple):
    """ colors_tuple contains color count and color RGB
        we want to sort the tuple by RGB
        tuple[1]
    """
    sorted_tuple = sorted(colors_tuple, key=lambda x:x[1])
    return sorted_tuple

def rgb_maximum(colors_tuple):
    """ 
        colors_r max min
        colors_g max min
        colors_b max min

    """
    r_sorted_tuple = sorted(colors_tuple, key=lambda x:x[1][0])
    g_sorted_tuple = sorted(colors_tuple, key=lambda x:x[1][1])
    b_sorted_tuple = sorted(colors_tuple, key=lambda x:x[1][2])

    r_min = r_sorted_tuple[0][1][0]
    g_min = g_sorted_tuple[0][1][1]
    b_min = b_sorted_tuple[0][1][2]

    r_max = r_sorted_tuple[len(colors_tuple)-1][1][0]
    g_max = g_sorted_tuple[len(colors_tuple)-1][1][1]
    b_max = b_sorted_tuple[len(colors_tuple)-1][1][2]

    return {
        "r_max":r_max,
        "r_min":r_min,
        "g_max":g_max,
        "g_min":g_min,
        "b_max":b_max,
        "b_min":b_min,
        "r_dvalue":(r_max-r_min)/3,
        "g_dvalue":(g_max-g_min)/3,
        "b_dvalue":(b_max-b_min)/3
    }

def group_by_accuracy(sorted_tuple, accuracy=3):
    """ group the colors by the accuaracy was given
        the R G B colors will be depart to accuracy parts
        default accuracy = 3
        d_value = (max-min)/3
        [min, min+d_value), [min+d_value, min+d_value*2), [min+d_value*2, max)
    """
    rgb_maximum_json = rgb_maximum(sorted_tuple)
    r_min = rgb_maximum_json["r_min"]
    g_min = rgb_maximum_json["g_min"]
    b_min = rgb_maximum_json["b_min"]
    r_dvalue = rgb_maximum_json["r_dvalue"]
    g_dvalue = rgb_maximum_json["g_dvalue"]
    b_dvalue = rgb_maximum_json["b_dvalue"]

    rgb = [
            [[[], [], []], [[], [], []], [[], [], []]],
            [[[], [], []], [[], [], []], [[], [], []]],
            [[[], [], []], [[], [], []], [[], [], []]]
        ]

    for color_tuple in sorted_tuple:
        r_tmp_i = color_tuple[1][0]
        g_tmp_i = color_tuple[1][1]
        b_tmp_i = color_tuple[1][2]
        r_idx = 0 if r_tmp_i < (r_min+r_dvalue) else 1 if r_tmp_i < (r_min+r_dvalue*2) else 2
        g_idx = 0 if g_tmp_i < (g_min+g_dvalue) else 1 if g_tmp_i < (g_min+g_dvalue*2) else 2
        b_idx = 0 if b_tmp_i < (b_min+b_dvalue) else 1 if b_tmp_i < (b_min+b_dvalue*2) else 2
        rgb[r_idx][g_idx][b_idx].append(color_tuple)

    return rgb


def get_weighted_mean(grouped_image_color):
    """ calculate every group's weighted mean

        r_weighted_mean = sigma(r * count) / sigma(count)
        g_weighted_mean = sigma(g * count) / sigma(count)
        b_weighted_mean = sigma(b * count) / sigma(count)
    """
    sigma_count = 0
    sigma_r = 0
    sigma_g = 0
    sigma_b = 0

    for item in grouped_image_color:
        sigma_count += item[0]
        sigma_r += item[1][0] * item[0]
        sigma_g += item[1][1] * item[0]
        sigma_b += item[1][2] * item[0]

    r_weighted_mean = int(sigma_r / sigma_count)
    g_weighted_mean = int(sigma_g / sigma_count)
    b_weighted_mean = int(sigma_b / sigma_count)
    
    weighted_mean = (sigma_count, (r_weighted_mean, g_weighted_mean, b_weighted_mean))
    return weighted_mean

def get_image(image_path):
    # if the image_path is a remote url, read the image at first
    if image_path.startswith("http://") or image_path.startswith("https://"):
        image_path = io.BytesIO(urllib.request.urlopen(image_path).read())

    image = Image.open(image_path)

    # convert non-RGB mode to RGB mode
    if image.mode != "RGB":
        image = image.convert("RGB")
    return image

def get_thumbnail(image):
    image.thumbnail((256, 256))
    return image

def get_colors(image_path):
    """ image instance
    """
    image = get_image(image_path)

    """ image thumbnail
        size: 256 * 256
        reduce the calculate time 
    """
    thumbnail = get_thumbnail(image)


    """ calculate the max colors the image cound have
        if the color is different in every pixel, the color counts may be the max.
        so : 
        max_colors = image.height * image.width
    """
    image_height = thumbnail.height
    image_width = thumbnail.width
    max_colors = image_height * image_width

    image_colors = image.getcolors(max_colors)
    return image_colors

def new_image(mode, size, color):
    """ generate a new color block
        to generate the palette
    """
    new_image = Image.new(mode, size, color)
    return new_image

def joint_image(images):
    """ generate the palette
        size: 50 x 400
        color_block_size: 50 x 50
    """
    palette = Image.new('RGB', (400, 20))

    # init the box position
    init_ul = 0

    for image in images:
        palette.paste(image, (init_ul, 0))
        init_ul += image.width

    palette.show()

def getColorsMean(image_path):
    # get colors tuple with haillow module
    image_colors = get_colors(image_path)

    # sort the image colors tuple
    sorted_image_colors = sort_by_rgb(image_colors)

    # group the colors by the accuaracy
    grouped_image_colors = group_by_accuracy(sorted_image_colors)

    # get the weighted mean of all colors
    colors_mean = []
    for i in range(3):
        for j in range(3):
            for k in range(3):
                grouped_image_color = grouped_image_colors[i][j][k]
                if 0 != len(grouped_image_color):
                    color_mean = get_weighted_mean(grouped_image_color)
                    colors_mean.append(color_mean)

    # return the most *9* colors
    temp_sorted_colors_mean = sorted(colors_mean)
    
    if 9 < len(temp_sorted_colors_mean):
        colors_mean = temp_sorted_colors_mean[len(temp_sorted_colors_mean)-9 : len(temp_sorted_colors_mean)]
    else:
        colors_mean = temp_sorted_colors_mean

    # sort the colors_mean
    colors_mean = sorted(colors_mean, reverse=True)

    return colors_mean
        
def getPalette(image_path=None):
    # get the colors_mean
    colors_mean = getColorsMean(image_path)

    # get the palette
    palette_tmp = []
    count_sum = 0
    for c_m in colors_mean:
        count_sum += c_m[0]
        palette_tmp.append(c_m)

    # calulate the percentage
    palette = []
    for p in palette_tmp:
        pp = '%.2f' % (p[0] / count_sum)
        tp = (float(pp), p[1])
        palette.append(tp)

    return palette

# https://stackoverflow.com/a/71804445/554531
def rgb_to_hex(rgb:tuple[int, int, int]) -> str:
    return '#%02x%02x%02x' % rgb

if __name__ == "__main__":
    main()
